.. r into (powerbayes)


Functional programming
====================================================

We will use some aspects of functional programming when coding in both R and Python.  

* `functional programming in Python <https://newcircle.com/bookshelf/python_fundamentals_tutorial/functional_programming>`_
* Python is a **hybrid** language (OO, procedural and functional)
* functions are objects

   >>> def foo():
   ...    return 2**5
   ...
   >>> print(foo)
   <function foo at 0x7f55eb8c45f0>
     
* **higher order functions** (HOFs) are functions that can accept other functions 

   >>> def second_element(t):
   ...     return t[1]
   ...
   >>> zepp = [('Guitar', 'Jimmy'), ('Vocals', 'Robert'), ('Bass', 'John Paul'), ('Drums', 'John')]

   >>> sorted(zepp)
   [('Bass', 'John Paul'), ('Drums', 'John'), ('Guitar', 'Jimmy'), ('Vocals', 'Robert')]

   >>> sorted(zepp, key=second_element)
   [('Guitar', 'Jimmy'), ('Drums', 'John'), ('Bass', 'John Paul'), ('Vocals', 'Robert')]

* Anonymous Functions - `lambda` and her good friends `map` and `filter`.

   >>> x = [1,2,3]
   >>> lambda x: max(x)
   <function __main__.<lambda>>

   >>> a = range(-5,5)
   >>> b = map(abs,a)
   >>> c = [abs(x) for x in a]
   
   >>> b = [x**2 for x in a]
   >>> c = map(lambda x: x**2, a)

   >>> a = ['', 'fee', '', '', '', 'fi', '', '', '', '', 'foo', '', '', '', '', '', 'fum']
   >>> b = filter(lambda x: len(x) > 0,a)
   >>> c = [x for x in a if len(x) > 0]

.. topic:: What is going on here?

   >>> from functools import reduce # python 3	   
   >>> s1 = reduce(lambda x, y: x+y, map(lambda x: x**2, range(1,10)))
 
   .. note:: we will revisit the concept of map-reduce later in the course -- where map is used to distribute jobs to multiple processors and reduce is used to calculate some aggreate function of the results returned by map
   
.. topic:: QUESTION: square only the ints and filter the rest

   >>> a = [1, '4', 9, 'a', 0, 4]
   >>> isinstance(1,int) 

* The **operator module** provides "function" versions of common
  Python operators (+, -, [] etc) that can be easily used wherea
  function argument is expected.

.. code-block:: python

  import operator as op
  print(reduce(op.add, range(10)))


* **Decorators**
    
Decorators are a type of HOF that take a function and returns a wrapped function that provides additional useful properties.

Examples:

   * logging
   * profiling
   * Just-In-Time (JIT) compilation

.. literalinclude:: decorators.py

Functional programming in R
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: r

   c1 <- rnorm(20, 1)
   c2 <- rnorm(20, 2)
   c3 <- rnorm(20, 3)) 		
   m <- matrix(data=cbind(c1,c2,c3,nrow=30, ncol=3)

   ## across columns
   apply(m, 1, mean)

   ## across rows
   apply(m, 2, mean)
   
   ## apply with custom functions
   apply(m, 2, function(x) length(x[x<0]))

   ## returns a vector
   sapply(1:3, function(x) x^2)
		
   ## returns a list
   lapply(1:3, function(x) x^2)

   ## you can always unlist a list into a vector
   unlist(lapply(1:3, function(x) x^2))

An example using Rscript
   
.. literalinclude:: read-csv.R
   :language: r
   :linenos:
   
To learn more `here is a decent page <http://adv-r.had.co.nz/Functional-programming.html>`_.
